             LAB3pre Work: Processes in an OS Kernel
                     DUE: 9-23-2021
       Answer questions below. Submit a (text-edit) file to TA
             
1. READ List: Chapter 3: 3.1-3.5

What's a process? (Page 102) 
A process is the execution of an image
             
Each process is represented by a PROC structure.
Read the PROC structure in 3.4.1 on Page 111 and answer the following questions:

What's the meaning of:
   pid, ppid? Process ID, Parent Process ID
   status   ? The state of the process; free/ready
   priority ? Scheduling Priority
   event    ? Event value to sleep on
   exitCode ? Exit value

READ 3.5.2 on Process Family Tree. What are the
   PROC pointers child, sibling, parent used for? 

Child points to the first child of a process, sibling points to other children of the same parent. Parent is the original node that the children stem from
             
2. Download samples/LAB3pre/mtx. Run it under Linux.
   MTX is a multitasking system. It simulates process operations in a
   Unix/Linux kernel, which include
              fork, exit, wait, sleep, wakeup, process switching

             
/*********** A Multitasking System ************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "type.h"    // PROC struct and system constants
        
// global variables:
PROC proc[NPROC], *running, *freeList, *readyQueue, *sleepList; 

running    = pointer to the current running PROC
freeList   = a list of all FREE PROCs
readyQueue = a priority queue of procs that are READY to run
sleepList  = a list of SLEEP procs, if any.

Run mtx. It first initialize the system, creates an initial process P0.
P0 has the lowest priotiry 0, all other processes have priority 1

Ater initialization,
     P0 forks a child prcoess P1, switch process to run P1.

                The display looks like the following
-----------------------------------------------------------------------------
Welcome to KCW's Multitasking System
1. init system
freeList = [0 0]->[1 0]->[2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL

2. create initial process P0
init complete: P0 running

3. P0 fork P1 : enter P1 into readyQueue
             
4. P0 switch process to run P1
   P0: switch task
   proc 0 in scheduler()
   readyQueue = [1 1]->[0 0]->NULL
   next running = 1
   proc 1 resume to body()

proc 1 running: Parent=0 childList = NULL
freeList  = [2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL
readQueue = [0 0]->NULL
sleepList = NULL
input a command: [ps|fork|switch|exit|sleep|wakeup|wait] : 
----------------------------------------------------------------------------
5.                     COMMANDS:
ps     : display procs with pid, ppid, status; same as ps in Unix/Linux
fork   : READ kfork()   on Page 109: What does it do? 
Creates a child task and enters it into the readyQueue

switch : READ tswitch() on Page 108: What does it do? 
Implements process context switching

exit   : READ kexit()   on Page 112: What does it do? 
Normal termination; releases resources and disposes of children, records exit value for parent, become a zombie and wake up parent
         
sleep  : READ ksleep()  on Page 111: What does it do? 
Record event value in PROC.event, changes status to sleep, enters caller into PROC *sleeplist, gives up on CPU

wakeup : READ kwakeup() on Page 112: What does it do? 
Deletes proc’s from sleep list and sets their status to ready, enters them into readyQueue
             
wait   : READ kwait()   on Page 114: What does it do? 
Returns zombie child’s pid releases the zombie child PROC back to freelist

---------------------------------------------------------------------------

------------------------ TEST REQUIREMENTS ---------------------------------
6. Step 1: test fork
While P1 running, enter fork: What happens? 
P2 is removed from freeList and is enqueued into readyQueue with P1 as its parent

Enter fork many times; 
      How many times can P1 fork? 
Seven, there are only 7 procs in freeList and since every time the fork command is called it uses a proc which is free, we can only call it 7 times before all the avliable free procs are being used.

Enter Control-c to end the program run.


7. Step 2: Test sleep/wakeup
Run mtx again.
While P1 running, fork a child P2;
Switch to run P2. Where did P1 go? 
P1 was enqueued into the readyQueue, when using the switch dommand, tswitch() is called, tswitch() checks P1’s status, and since P1’s status is “READY” it puts it back into the readyQueue in its priority order (behind P2)

P2 running : Enter sleep, with a value, e.g.123 to let P2 SLEEP.
What happens? 
P2 status is changed to “SLEEP”, process 1 is then dequeueed from the readyQueue, since it has the highest priority and resumes running. P2 is placed in the sleepList (P2 event is also given a value equal to the number we gave with the command in hexadecimal)

Now, P1 should be running. Enter wakeup with a value, e.g. 234
Did any proc wake up? 
No procs woke up, because 234 does not match any of the event values of the procs in sleepList (currently only proc 2 who’s event value is 123).

P1: Enter wakeup with 123
What happens? 
Proc2 is enqueued into readyQueue since the wakeup value we provided was the same as proc 2’s event value, prompting the system to remove it from sleepList


8. Step 3: test child exit/parent wait
             
When a proc dies (exit) with a value, it becomes a ZOMBIE, wakeup its parent.
Parent may issue wait to wait for a ZOMBIE child, and frees the ZOMBIE

Run mtx;
P1: enter wait; What happens? 
Nothing happens, we get an error because proc 1 has no children

CASE 1: child exit first, parent wait later

P1: fork a child P2, switch to P2.
P2: enter exit, with a value, e.g. 123 ==> P2 will die with exitCode=123.
Which process runs now? 
Process 1 is running now, because proc 2 was exited, meaning it has become a zombie, so now the next running process should be the process with the highest priority in readyQueue, which was P1 in this case.

enter ps to see the proc status: P2 status = ? 
Zombie

(P1 still running) enter wait; What happens? 
Proc 2 has returned to the freeList.

                   enter ps;   What happened to P2? 
Proc 2’s status is now “FREE” instead of “ZOMBIE”

CASE 2: parent wait first, child exit later

P1: enter fork to fork a child P3
P1: enter wait;  What happens to P1? 
P1 is put into the sleepList, because it is waiting on an event which is the termination of one of its children

P3: Enter exit with a value; What happens? 
P3’s status turns into “ZOMBIE” which wakes up P1 and enqueues it to the readyQueue. P3 is then put into the freeList with the “FREE” status (P1 wait does this). And P1 starts running because it is first in readyQueue.

P1: enter ps;  What's the status of P3? 
“FREE”, as explained above

9. Step 4: test Orphans
             
When a process with children dies first, all its children become orphans.
In Unix/Linux, every process (except P0) MUST have a unique parent.
So, all orphans become P1's children. Hence P1 never dies.

Run mtx again.
P1: fork child P2, Switch to P2.
P2: fork several children of its own, e.g. P3, P4, P5 (all in its childList).
P2: exit with a value. 
P1 should be running WHY? 
Because P1 is first in the readyQueue and it has the same priority as all the other procs

P1: enter ps to see proc status: which proc is ZOMBIE? 
Proc 2

What happened to P2's children? 
P1 became their parent

P1: enter wait; What happens? 
P2 is put into the freeList and its statis is changed to “FREE”

P1: enter wait again; What happens? 
Proc 1 is put into the sleepList because it is waiting for one of its children to become a zombie, and proc 3 starts running because it had the highest priority in the readyQueue.

How to let P1 READY to run again? 
Call exit once, and then call switch twice.



  
	
